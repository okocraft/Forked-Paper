name: Create Update Upstream PR
on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * 6

jobs:
  check_upstream:
    runs-on: ubuntu-latest
    outputs:
      pr_description: ${{ steps.check_result.outputs.result }}
      latest_commit_hash: ${{ steps.latest_commit_hash.outputs.hash }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3.3.0
      - name: Run check-upstream.sh
        uses: actions/github-script@v6.4.0
        id: check_result
        with:
          result-encoding: string
          script: |
            const result = await exec.getExecOutput('bash ./scripts/check-upstream.sh');
            return result.stdout;
      - name: Store latest commit hash to output
        id: latest_commit_hash
        run: echo "hash=$(<paper-ref)" >> $GITHUB_OUTPUT
  update_patches_and_open_pr:
    runs-on: ubuntu-latest
    needs: check_upstream
    if: ${{ startsWith(needs.check_upstream.outputs.pr_description, 'Paper Changes:') }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3.3.0
      - name: Set up JDK
        uses: actions/setup-java@v3.9.0
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Configure Git User Details
        run: git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.5
      - run: chmod +x ./gradlew
      - name: Update paper-ref
        run: echo -n ${{ needs.check_upstream.outputs.latest_commit_hash }} > paper-ref
      - name: Apply Patches
        uses: gradle/gradle-build-action@v2.3.3
        id: apply_patches
        continue-on-error: true
        with:
          arguments: applyPatches --stacktrace
      - name: Rebuild Patches
        uses: gradle/gradle-build-action@v2.3.3
        if: steps.apply_patches.outcome == 'success'
        continue-on-error: true
        with:
          arguments: rebuildPatches --stacktrace
      - name: Create Commit Message
        uses: actions/github-script@v6.4.0
        id: commit_message
        if: always()
        with:
          result-encoding: string
          script: |
            return `Updated Upstream (Paper)
            ${{ needs.check_upstream.outputs.pr_description }}`;
      - name: Specify Labels
        id: labels
        if: always()
        run: |
          if [ "${{ steps.apply_patches.outcome }}" = "success" ]; then
              echo "result=upstream" >> $GITHUB_OUTPUT
          else
              echo "result=upstream,rebase-required" >> $GITHUB_OUTPUT
          fi
      - name: Create a Pull Request
        uses: peter-evans/create-pull-request@v4.2.3
        if: always()
        with:
          title: Updated Upstream (Paper)
          body: ${{ needs.check_upstream.outputs.pr_description }}
          commit-message: ${{ steps.commit_message.outputs.result }}
          branch: upstream
          labels: ${{ steps.labels.outputs.result }}
          draft: ${{ steps.apply_patches.outcome != 'success' }}
