From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sun, 16 Jul 2023 19:55:35 +0900
Subject: [PATCH] Add custom and resource worlds


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b261d166eb09386275ba52372cca56fceaac002b..ba79daa01803fbab6ffcc88a3e2b768e9cd6677e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -785,6 +785,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.getCustomBossEvents().load(worlddata.getCustomBossEvents(), this.registryAccess());
             }
         }
+        // okocraft start - Add custom worlds
+        try {
+            net.okocraft.paper.CustomWorldFile.read(java.nio.file.Path.of("custom-worlds.txt")).forEach(this.server::createCustomWorld);
+            net.okocraft.paper.ResourceWorldNumberFile.read(java.nio.file.Path.of("resource-world-number.txt")).forEach(this.server::createCustomWorld);
+        } catch (IOException e) {
+            LOGGER.warn("Cannot load custom worlds: {}", e.getMessage());
+        }
+        // okocraft end - Add custom worlds
         this.forceDifficulty();
         for (ServerLevel worldserver : this.getAllLevels()) {
             this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
diff --git a/src/main/java/net/okocraft/paper/CustomWorldFile.java b/src/main/java/net/okocraft/paper/CustomWorldFile.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e35978cf2e6433dab139cca5a0d97ac5099bd55
--- /dev/null
+++ b/src/main/java/net/okocraft/paper/CustomWorldFile.java
@@ -0,0 +1,60 @@
+package net.okocraft.paper;
+
+import org.bukkit.World;
+import org.bukkit.WorldCreator;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Locale;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+public final class CustomWorldFile {
+
+    @SuppressWarnings("resource")
+    public static Stream<WorldCreator> read(Path filepath) throws IOException {
+        return Files.lines(filepath, StandardCharsets.UTF_8)
+                .flatMap(CustomWorldFile::readLine)
+                .filter(Objects::nonNull);
+    }
+
+    private static Stream<WorldCreator> readLine(String originalLine) {
+        var line = originalLine.trim().replace(" ", "");
+
+        if (line.startsWith("#")) {
+            return null;
+        }
+
+        String worldName;
+        World.Environment environment;
+
+        int i = line.indexOf(":");
+
+        if (i == -1) {
+            worldName = line;
+            environment = World.Environment.NORMAL;
+        } else if (i + 1 == line.length()) {
+            worldName = line.substring(0, i);
+            environment = World.Environment.NORMAL;
+        } else {
+            worldName = line.substring(0, i);
+            environment = switch (line.substring(i + 1).toLowerCase(Locale.ENGLISH)) {
+                case "nether" -> World.Environment.NETHER;
+                case "end", "the_end" -> World.Environment.THE_END;
+                default -> World.Environment.NORMAL;
+            };
+        }
+
+        if (worldName.isEmpty()) {
+            return null;
+        }
+
+        return Stream.of(WorldCreator.name(worldName).environment(environment));
+    }
+
+    private CustomWorldFile() {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/src/main/java/net/okocraft/paper/ResourceWorldNumberFile.java b/src/main/java/net/okocraft/paper/ResourceWorldNumberFile.java
new file mode 100644
index 0000000000000000000000000000000000000000..082ff119c1e1ee7af4a9d07100e14c013e94d8b0
--- /dev/null
+++ b/src/main/java/net/okocraft/paper/ResourceWorldNumberFile.java
@@ -0,0 +1,35 @@
+package net.okocraft.paper;
+
+import org.bukkit.World;
+import org.bukkit.WorldCreator;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.stream.Stream;
+
+public final class ResourceWorldNumberFile {
+
+    public static Stream<WorldCreator> read(Path filepath) throws IOException {
+        if (Files.isRegularFile(filepath) && Files.isReadable(filepath)) {
+            var lines = Files.readAllLines(filepath, StandardCharsets.UTF_8);
+            if (lines.isEmpty() || lines.getFirst().isEmpty()) {
+                return Stream.empty();
+            } else {
+                return resourceWorlds(lines.getFirst());
+            }
+        }
+
+        return Stream.empty();
+    }
+
+    private static Stream<WorldCreator> resourceWorlds(String suffix) {
+        var worldName = "resource_" + suffix;
+        return Stream.of(
+                WorldCreator.name(worldName).environment(World.Environment.NORMAL),
+                WorldCreator.name(worldName + "_nether").environment(World.Environment.NETHER),
+                WorldCreator.name(worldName + "_the_end").environment(World.Environment.THE_END)
+        );
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a8975cee866cf2c617b6d4976df71e5c20cf0e3d..13bc374acf8ef957891caac5844af294c1a82d49 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1321,6 +1321,12 @@ public final class CraftServer implements Server {
     @Override
     public World createWorld(WorldCreator creator) {
         if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+    // okocraft start - Add custom worlds
+        return createCustomWorld(creator);
+    }
+
+    public World createCustomWorld(WorldCreator creator) {
+    // okocraft end - Add custom worlds
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1480,11 +1486,25 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - Put world into worldlist before initing the world; move up
+        // okocraft start - Add custom worlds; Copied from MinecraftServer L625
+        int loadRegionRadius = ((32) >> 4);
+        internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        for (int currX = -loadRegionRadius; currX <= loadRegionRadius; ++currX) {
+            for (int currZ = -loadRegionRadius; currZ <= loadRegionRadius; ++currZ) {
+                net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(currX, currZ);
+                internal.chunkSource.addTicketAtLevel(
+                        net.minecraft.server.level.TicketType.UNKNOWN, pos, ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkHolderManager.MAX_TICKET_LEVEL, pos
+                );
+            }
+        }
+        // okocraft end - Add custom worlds
+        if (false) // okocraft - Add custom worlds; Not needed for loading custom worlds
         this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
 
         internal.setSpawnSettings(true);
         // Paper - Put world into worldlist before initing the world; move up
 
+        if (false) // okocraft - Add custom worlds; Not needed for loading custom worlds
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
         // Paper - rewrite chunk system
 
