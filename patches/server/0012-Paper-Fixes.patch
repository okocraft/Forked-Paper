From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sun, 18 Feb 2024 22:14:10 +0900
Subject: [PATCH] Paper Fixes


diff --git a/src/main/java/com/mojang/brigadier/CommandDispatcher.java b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
index 5d0e8f4f3ad61a27452675277380e27d3d28d133..881f74edafa1e45920a24904027b04c33d4e5743 100644
--- a/src/main/java/com/mojang/brigadier/CommandDispatcher.java
+++ b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
@@ -304,11 +304,13 @@ public class CommandDispatcher<S> {
             }
             final CommandContextBuilder<S> context = contextSoFar.copy();
             final StringReader reader = new StringReader(originalReader);
+            boolean stop = false; // Paper - Handle non-recoverable exceptions
             try {
                 try {
                     child.parse(reader, context);
-                    // Paper start - Handle non-reoverable exceptions; Rethrow NbtAccounterException so it can be caught properly and immediately
-                } catch (final net.minecraft.nbt.NbtAccounterException e) {
+                    // Paper start - Handle non-reoverable exceptions
+                } catch (final com.mojang.brigadier.exceptions.TagParseCommandSyntaxException e) {
+                    stop = true;
                     throw e;
                     // Paper end - Handle non-reoverable exceptions
                 } catch (final RuntimeException ex) {
@@ -325,6 +327,7 @@ public class CommandDispatcher<S> {
                 }
                 errors.put(child, ex);
                 reader.setCursor(cursor);
+                if (stop) return new ParseResults<>(contextSoFar, originalReader, errors); // Paper - Handle non-recoverable exceptions
                 continue;
             }
 
diff --git a/src/main/java/com/mojang/brigadier/exceptions/TagParseCommandSyntaxException.java b/src/main/java/com/mojang/brigadier/exceptions/TagParseCommandSyntaxException.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf248a215dc69bb303c836112309471aab687e23
--- /dev/null
+++ b/src/main/java/com/mojang/brigadier/exceptions/TagParseCommandSyntaxException.java
@@ -0,0 +1,13 @@
+package com.mojang.brigadier.exceptions;
+
+import com.mojang.brigadier.LiteralMessage;
+import net.minecraft.network.chat.Component;
+
+public final class TagParseCommandSyntaxException extends CommandSyntaxException {
+
+    private static final SimpleCommandExceptionType EXCEPTION_TYPE = new SimpleCommandExceptionType(new LiteralMessage("Error parsing NBT"));
+
+    public TagParseCommandSyntaxException(final String message) {
+        super(EXCEPTION_TYPE, Component.literal(message));
+    }
+}
diff --git a/src/main/java/net/minecraft/nbt/TagParser.java b/src/main/java/net/minecraft/nbt/TagParser.java
index 9ecd0b7ddaa8376f3c1448f810f7757c9ba1b90a..94cb73e7f60171aa57bd1dbe7e91ef4db94e70b7 100644
--- a/src/main/java/net/minecraft/nbt/TagParser.java
+++ b/src/main/java/net/minecraft/nbt/TagParser.java
@@ -292,10 +292,10 @@ public class TagParser {
         this.reader.expect(c);
     }
 
-    private void increaseDepth() {
+    private void increaseDepth() throws CommandSyntaxException {
         this.depth++;
         if (this.depth > 512) {
-            throw new net.minecraft.nbt.NbtAccounterException("NBT tag is too complex, depth > 512");
+            throw new com.mojang.brigadier.exceptions.TagParseCommandSyntaxException("NBT tag is too complex, depth > 512");
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index bcd5d0a274960ccd02a18f754c7ccfdaea698ecc..5f18b7e4b4caf23d0a8043340ae72b13dd9b55e4 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -865,14 +865,10 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     private void sendServerSuggestions(final ServerboundCommandSuggestionPacket packet, final StringReader stringreader) {
         // Paper end - AsyncTabCompleteEvent
+        ParseResults<CommandSourceStack> parseresults = this.server.getCommands().getDispatcher().parse(stringreader, this.player.createCommandSourceStack());
         // Paper start - Handle non-reoverable exceptions
-        ParseResults<CommandSourceStack> parseresults;
-        try {
-            parseresults = this.server.getCommands().getDispatcher().parse(stringreader, this.player.createCommandSourceStack());
-        } catch (final Throwable e) { // This is fine:tm:
-            if (LOGGER.isDebugEnabled()) {
-                LOGGER.error("Exception parsing command", e);
-            }
+        if (!parseresults.getExceptions().isEmpty()
+            && parseresults.getExceptions().values().stream().anyMatch(e -> e instanceof com.mojang.brigadier.exceptions.TagParseCommandSyntaxException)) {
             this.disconnect(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM);
             return;
         }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index 395c7763db5f748911639336e3274d4cb16d66f8..3cf7fe301cb445bf1592a398a5a17b1a4d4a6dd3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -377,7 +377,10 @@ public class Vex extends Monster implements TraceableEntity {
             for (int i = 0; i < 3; ++i) {
                 BlockPos blockposition1 = blockposition.offset(Vex.this.random.nextInt(15) - 7, Vex.this.random.nextInt(11) - 5, Vex.this.random.nextInt(15) - 7);
 
-                if (Vex.this.level().isEmptyBlock(blockposition1)) {
+                // Paper start - Don't load chunks
+                final net.minecraft.world.level.block.state.BlockState blockState = Vex.this.level().getBlockStateIfLoaded(blockposition1);
+                if (blockState != null && blockState.isAir()) {
+                    // Paper end - Don't load chunks
                     Vex.this.moveControl.setWantedPosition((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D, 0.25D);
                     if (Vex.this.getTarget() == null) {
                         Vex.this.getLookControl().setLookAt((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D, 180.0F, 20.0F);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index d04fc84eef11adb5ea64077f48794b6ed7fb3ada..150562790d84b1fb15b2ac62f690b8a15cea8887 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -290,7 +290,12 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
 
-            this.recipesUsed.put(new ResourceLocation(s), nbttagcompound1.getInt(s));
+            // Paper start - Validate ResourceLocation
+            final ResourceLocation resourceLocation = ResourceLocation.tryParse(s);
+            if (resourceLocation != null) {
+                this.recipesUsed.put(resourceLocation, nbttagcompound1.getInt(s));
+            }
+            // Paper end - Validate ResourceLocation
         }
 
         // Paper start - cook speed multiplier API
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrushableBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrushableBlockEntity.java
index b5b1831631e233a96b6fd55972a8862b0f420da8..3f62e823bf9b5aa696e3c240613a0fb50340875e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrushableBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrushableBlockEntity.java
@@ -199,7 +199,7 @@ public class BrushableBlockEntity extends BlockEntity {
 
     private boolean tryLoadLootTable(CompoundTag nbt) {
         if (nbt.contains("LootTable", 8)) {
-            this.lootTable = new ResourceLocation(nbt.getString("LootTable"));
+            this.lootTable = ResourceLocation.tryParse(nbt.getString("LootTable")); // Paper - Validate ResourceLocation
             this.lootTableSeed = nbt.getLong("LootTableSeed");
             return true;
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index 5831ca542adfa9dd46fb5ba4cb23ecc2589d78c1..0cc271ef8f646c7babef6b894565984853b2d943 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -50,7 +50,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
         // Copied from super with changes, always check the original method
         this.lootableData.loadNbt(nbt); // Paper
         if (nbt.contains("LootTable", 8)) {
-            this.setLootTable(new ResourceLocation(nbt.getString("LootTable")));
+            this.setLootTable(ResourceLocation.tryParse(nbt.getString("LootTable")));
             try { org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(this.lootTable); } catch (IllegalArgumentException ex) { this.lootTable = null; } // Paper - validate
             this.setLootTableSeed(nbt.getLong("LootTableSeed"));
             return false; // Paper - always load the items, table may still remain
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 536e80886c2393edaf526f460f49dae8c3b40295..45e884c80a7e9690dae56e18188686361c63f129 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -415,7 +415,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (tag.contains(CAN_DESTROY.NBT)) {
             ListTag list = tag.getList(CAN_DESTROY.NBT, CraftMagicNumbers.NBT.TAG_STRING);
             for (int i = 0; i < list.size(); i++) {
-                Namespaced namespaced = this.deserializeNamespaced(list.getString(i));
+                Namespaced namespaced = this.blockKeyFromString(list.getString(i));
                 if (namespaced == null) {
                     continue;
                 }
@@ -427,7 +427,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (tag.contains(CAN_PLACE_ON.NBT)) {
             ListTag list = tag.getList(CAN_PLACE_ON.NBT, CraftMagicNumbers.NBT.TAG_STRING);
             for (int i = 0; i < list.size(); i++) {
-                Namespaced namespaced = this.deserializeNamespaced(list.getString(i));
+                Namespaced namespaced = this.blockKeyFromString(list.getString(i));
                 if (namespaced == null) {
                     continue;
                 }
@@ -579,7 +579,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (canPlaceOnSerialized != null) {
             for (Object canPlaceOnElement : canPlaceOnSerialized) {
                 String canPlaceOnRaw = (String) canPlaceOnElement;
-                Namespaced value = this.deserializeNamespaced(canPlaceOnRaw);
+                Namespaced value = this.blockKeyFromString(canPlaceOnRaw);
                 if (value == null) {
                     continue;
                 }
@@ -592,7 +592,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (canDestroySerialized != null) {
             for (Object canDestroyElement : canDestroySerialized) {
                 String canDestroyRaw = (String) canDestroyElement;
-                Namespaced value = this.deserializeNamespaced(canDestroyRaw);
+                Namespaced value = this.blockKeyFromString(canDestroyRaw);
                 if (value == null) {
                     continue;
                 }
@@ -1784,8 +1784,8 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return mats;
     }
 
-    private @Nullable Namespaced deserializeNamespaced(String raw) {
-        boolean isTag = raw.length() > 0 && raw.codePointAt(0) == '#';
+    private @Nullable Namespaced blockKeyFromString(String raw) {
+        boolean isTag = !raw.isEmpty() && raw.codePointAt(0) == '#';
         com.mojang.datafixers.util.Either<net.minecraft.commands.arguments.blocks.BlockStateParser.BlockResult, net.minecraft.commands.arguments.blocks.BlockStateParser.TagResult> result;
         try {
             result = net.minecraft.commands.arguments.blocks.BlockStateParser.parseForTesting(net.minecraft.core.registries.BuiltInRegistries.BLOCK.asLookup(), raw, false);
@@ -1804,20 +1804,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             return null;
         }
 
-        // don't DC the player if something slips through somehow
-        Namespaced resource = null;
         try {
             if (isTag) {
-                resource = new NamespacedTag(key.getNamespace(), key.getPath());
-            } else {
-                resource = CraftNamespacedKey.fromMinecraft(key);
+                return new NamespacedTag(key.getNamespace(), key.getPath());
             }
-        } catch (IllegalArgumentException ex) {
-            org.bukkit.Bukkit.getLogger().warning("Namespaced resource does not validate: " + key.toString());
-            ex.printStackTrace();
+            return CraftNamespacedKey.fromMinecraft(key);
+        } catch (IllegalArgumentException ignored) {
+            return null;
         }
-
-        return resource;
     }
 
     private @Nonnull String serializeNamespaced(Namespaced resource) {
