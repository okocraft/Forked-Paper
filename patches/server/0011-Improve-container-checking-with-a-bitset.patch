From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Wed, 19 May 2021 13:08:26 -0500
Subject: [PATCH] Improve container checking with a bitset


diff --git a/src/main/java/gg/airplane/structs/ItemListWithBitset.java b/src/main/java/gg/airplane/structs/ItemListWithBitset.java
new file mode 100644
index 0000000000000000000000000000000000000000..957f923c0fd427aa2644ae126dcc8d1966425a3e
--- /dev/null
+++ b/src/main/java/gg/airplane/structs/ItemListWithBitset.java
@@ -0,0 +1,137 @@
+package gg.airplane.structs;
+
+import net.minecraft.core.NonNullList;
+import net.minecraft.world.item.ItemStack;
+import org.apache.commons.lang.Validate;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.AbstractList;
+import java.util.Arrays;
+import java.util.List;
+
+public class ItemListWithBitset extends AbstractList<ItemStack> {
+
+    // Hopper / Hopper Minecart: 5
+    // Dispenser / Dropper: 9
+    // Chest / Chest Minecart / Trap Chest / Barrel / Shulker Box: 27
+    private static final int MAX_SIZE = Integer.SIZE;
+
+    private static final int ALL_BITS_5 = createAllBits(5);
+    private static final int ALL_BITS_9 = createAllBits(9);
+    private static final int ALL_BITS_27 = createAllBits(27);
+
+    private static int createAllBits(int size) {
+        return ((1 << size) - 1);
+    }
+
+    private static int allBits(int size) {
+        if (size == 5) {
+            return ALL_BITS_5;
+        } else if (size == 9) {
+            return ALL_BITS_9;
+        } else if (size == 27) {
+            return ALL_BITS_27;
+        } else {
+            return createAllBits(size);
+        }
+    }
+
+    public static ItemListWithBitset fromList(List<ItemStack> list) {
+        if (list instanceof ItemListWithBitset ours) {
+            return ours;
+        }
+        return new ItemListWithBitset(list);
+    }
+
+    private static ItemStack[] createArray(int size) {
+        ItemStack[] array = new ItemStack[size];
+        Arrays.fill(array, ItemStack.EMPTY);
+        return array;
+    }
+
+    private final ItemStack[] items;
+
+    private int bitSet = 0;
+
+    private static class OurNonNullList extends NonNullList<ItemStack> {
+        protected OurNonNullList(List<ItemStack> delegate) {
+            super(delegate, ItemStack.EMPTY);
+        }
+    }
+
+    public final NonNullList<ItemStack> nonNullList = new OurNonNullList(this);
+
+    private ItemListWithBitset(List<ItemStack> list) {
+        this(list.size());
+
+        for (int i = 0; i < list.size(); i++) {
+            this.set(i, list.get(i));
+        }
+    }
+
+    public ItemListWithBitset(int size) {
+        Validate.isTrue(size < MAX_SIZE, "size is too large");
+
+        this.items = createArray(size);
+    }
+
+    public boolean isCompletelyEmpty() {
+        return this.bitSet == 0;
+    }
+
+    public boolean isSlotFilled() {
+        int allBits = allBits(this.items.length);
+        return (this.bitSet & allBits) == allBits;
+    }
+
+    @Override
+    public ItemStack set(int index, @NotNull ItemStack itemStack) {
+        ItemStack existing = this.items[index];
+
+        this.items[index] = itemStack;
+
+        if (itemStack.isEmpty()) {
+            this.bitSet &= ~(1 << index);
+        } else {
+            this.bitSet |= (1 << index);
+        }
+
+        return existing;
+    }
+
+    @NotNull
+    @Override
+    public ItemStack get(int var0) {
+        return this.items[var0];
+    }
+
+    @Override
+    public int size() {
+        return this.items.length;
+    }
+
+    @Override
+    public void clear() {
+        Arrays.fill(this.items, ItemStack.EMPTY);
+    }
+
+    // these are unsupported for block inventories which have a static size
+    @Override
+    public void add(int var0, ItemStack var1) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ItemStack remove(int var0) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public String toString() {
+        return "ItemListWithBitset{" +
+                "items=" + Arrays.toString(items) +
+                ", slotState=" + Long.toString(bitSet, 2) +
+                ", size=" + this.items.length +
+                '}';
+    }
+}
diff --git a/src/main/java/net/minecraft/world/CompoundContainer.java b/src/main/java/net/minecraft/world/CompoundContainer.java
index 241fec02e6869c638d3a160819b32173a081467b..058ace26745de5422326cbc69f47a915da52d186 100644
--- a/src/main/java/net/minecraft/world/CompoundContainer.java
+++ b/src/main/java/net/minecraft/world/CompoundContainer.java
@@ -64,6 +64,18 @@ public class CompoundContainer implements Container {
         this.container2 = second;
     }
 
+    // Pufferfish start
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.container1.hasEmptySlot().and(this.container2.hasEmptySlot());
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.container1.isCompletelyEmpty().and(this.container2.isCompletelyEmpty());
+    }
+    // Pufferfish end
+
     @Override
     public int getContainerSize() {
         return this.container1.getContainerSize() + this.container2.getContainerSize();
diff --git a/src/main/java/net/minecraft/world/Container.java b/src/main/java/net/minecraft/world/Container.java
index d6cbe98e67fdbf8db46338a88ab1356dd63b50a3..ee911b91b52acc6809f753b658ea59be0e0bcc19 100644
--- a/src/main/java/net/minecraft/world/Container.java
+++ b/src/main/java/net/minecraft/world/Container.java
@@ -14,6 +14,28 @@ import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 // CraftBukkit end
 
 public interface Container extends Clearable {
+    // Pufferfish start - allow the inventory to override and optimize these frequent calls
+    enum OptionalState {
+        TRUE,
+        FALSE,
+        NOT_IMPLEMENTED;
+
+        public OptionalState and(OptionalState other) {
+            if (this == NOT_IMPLEMENTED || other == NOT_IMPLEMENTED) {
+                return NOT_IMPLEMENTED;
+            }
+            return this == TRUE ? other : FALSE;
+        }
+    }
+
+    default OptionalState hasEmptySlot() {
+        return OptionalState.NOT_IMPLEMENTED;
+    }
+
+    default OptionalState isCompletelyEmpty() {
+        return OptionalState.NOT_IMPLEMENTED;
+    }
+    // Pufferfish end
 
     int LARGE_MAX_STACK_SIZE = 64;
     int DEFAULT_DISTANCE_LIMIT = 8;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
index 6d23c39e4eadf23616080d6d08672e13b5d3c37d..408564abe8b9b14e6d993cb6fc90a142a3edd644 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -28,6 +28,18 @@ import org.bukkit.inventory.InventoryHolder;
 public abstract class AbstractMinecartContainer extends AbstractMinecart implements ContainerEntity {
 
     private NonNullList<ItemStack> itemStacks;
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
     @Nullable
     public ResourceLocation lootTable;
     public long lootTableSeed;
@@ -89,12 +101,18 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
 
     protected AbstractMinecartContainer(EntityType<?> type, Level world) {
         super(type, world);
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize()); // CraftBukkit - SPIGOT-3513
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     protected AbstractMinecartContainer(EntityType<?> type, double x, double y, double z, Level world) {
         super(type, world, x, y, z);
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize()); // CraftBukkit - SPIGOT-3513
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     @Override
@@ -156,6 +174,10 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
     protected void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.lootableData.loadNbt(nbt); // Paper
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.readChestVehicleSaveData(nbt);
     }
 
@@ -232,6 +254,9 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
 
     @Override
     public void clearItemStacks() {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
index 416aa989ebb18a8741cc9d605a1180ab830f6643..ae74e49d1d9ccebc996e40792a606ab347b75dc2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -62,12 +62,27 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
         this.maxStack = i;
     }
     // CraftBukkit end
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
     private NonNullList<ItemStack> items;
     public final ContainerOpenersCounter openersCounter;
 
     public BarrelBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.BARREL, pos, state);
-        this.items = NonNullList.withSize(27, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.openersCounter = new ContainerOpenersCounter() {
             @Override
             protected void onOpen(Level world, BlockPos pos, BlockState state) {
@@ -109,7 +124,10 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
     @Override
     public void load(CompoundTag nbt) {
         super.load(nbt);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         if (!this.tryLoadLootTable(nbt)) {
             ContainerHelper.loadAllItems(nbt, this.items);
         }
@@ -128,7 +146,10 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
 
     @Override
     protected void setItems(NonNullList<ItemStack> list) {
-        this.items = list;
+        // Pufferfish start
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(list);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
index a71414397bd45ee7bcacfeef0041d80dfa25f114..116821e94da2d1f269a3d011f126588bb5f96d10 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -29,6 +29,18 @@ import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
 
     private static final int EVENT_SET_OPEN_COUNT = 1;
     private NonNullList<ItemStack> items;
@@ -67,7 +79,10 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
 
     protected ChestBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
         super(type, pos, state);
-        this.items = NonNullList.withSize(27, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.openersCounter = new ContainerOpenersCounter() {
             @Override
             protected void onOpen(Level world, BlockPos pos, BlockState state) {
@@ -115,7 +130,10 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
     @Override
     public void load(CompoundTag nbt) {
         super.load(nbt);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         if (!this.tryLoadLootTable(nbt)) {
             ContainerHelper.loadAllItems(nbt, this.items);
         }
@@ -187,7 +205,10 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
 
     @Override
     protected void setItems(NonNullList<ItemStack> list) {
-        this.items = list;
+        // Pufferfish start
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(list);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index 881379681c39230a00b3a1f11cd87498984396c7..142cdc970a1693a116462f64b01caf958e00d72e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -19,6 +19,18 @@ import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
 
     public static final int CONTAINER_SIZE = 9;
     private NonNullList<ItemStack> items;
@@ -55,7 +67,10 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
     protected DispenserBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
         super(type, pos, state);
-        this.items = NonNullList.withSize(9, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     public DispenserBlockEntity(BlockPos pos, BlockState state) {
@@ -100,7 +115,10 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
     @Override
     public void load(CompoundTag nbt) {
         super.load(nbt);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         if (!this.tryLoadLootTable(nbt)) {
             ContainerHelper.loadAllItems(nbt, this.items);
         }
@@ -123,7 +141,10 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
     @Override
     protected void setItems(NonNullList<ItemStack> list) {
-        this.items = list;
+        // Pufferfish start
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(list);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 26ff1a3d07c92f7035020d08d35116f7feede600..a8cba1645ac01c8d21b5ac10c536e9ec3546c2a7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -44,6 +44,18 @@ import org.bukkit.inventory.Inventory;
 // CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
 
     public static final int MOVE_ITEM_SPEED = 8;
     public static final int HOPPER_CONTAINER_SIZE = 5;
@@ -83,14 +95,20 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     public HopperBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.HOPPER, pos, state);
-        this.items = NonNullList.withSize(5, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(HOPPER_CONTAINER_SIZE);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.cooldownTime = -1;
     }
 
     @Override
     public void load(CompoundTag nbt) {
         super.load(nbt);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
         if (!this.tryLoadLootTable(nbt)) {
             ContainerHelper.loadAllItems(nbt, this.items);
         }
@@ -159,6 +177,14 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static int getFullState(final HopperBlockEntity tileEntity) {
         tileEntity.unpackLootTable(null);
 
+        // Puffrefish start - use bitsets
+        if (tileEntity.optimizedItems.isCompletelyEmpty()) {
+            return HOPPER_EMPTY;
+        } else if (!tileEntity.optimizedItems.isSlotFilled()) {
+            return HOPPER_HAS_ITEMS;
+        }
+        // Pufferfish end
+
         final List<ItemStack> hopperItems = tileEntity.getItems();
 
         boolean empty = true;
@@ -493,6 +519,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean isFullContainer(Container inventory, Direction direction) {
+        if (inventory.hasEmptySlot() == Container.OptionalState.TRUE) return false; // Pufferfish
         // Paper start - Perf: Optimize Hoppers
         if (inventory instanceof WorldlyContainer worldlyContainer) {
             for (final int slot : worldlyContainer.getSlotsForFace(direction)) {
@@ -911,7 +938,10 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Override
     protected void setItems(NonNullList<ItemStack> list) {
-        this.items = list;
+        // Pufferfish start
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(list);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     public static void entityInside(Level world, BlockPos pos, BlockState state, Entity entity, HopperBlockEntity blockEntity) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index a94300a457b25f0e33a8eeabba6dd5720ca9ab1e..d9eb7cbcd4b016d0ba7b3ca855c384bc8537eb9a 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -93,6 +93,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     @Override
     public boolean isEmpty() {
         this.unpackLootTable((Player)null);
+        if (this.isCompletelyEmpty() == Container.OptionalState.TRUE) return true; // Pufferfish
         // Paper start - Perf: Optimize Hoppers
         for (final ItemStack itemStack : this.getItems()) {
             if (!itemStack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
index 1fa22445a4ecc8c08dbcf0cc6bd39dc5003604c4..88c59a096153147f5e37f1db2da71c585f24248e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -37,6 +37,18 @@ import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
 public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity implements WorldlyContainer {
+    // Pufferfish start
+    private gg.airplane.structs.ItemListWithBitset optimizedItems;
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    // Pufferfish end
 
     public static final int COLUMNS = 9;
     public static final int ROWS = 3;
@@ -88,14 +100,20 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
 
     public ShulkerBoxBlockEntity(@Nullable DyeColor color, BlockPos pos, BlockState state) {
         super(BlockEntityType.SHULKER_BOX, pos, state);
-        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(CONTAINER_SIZE);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
         this.color = color;
     }
 
     public ShulkerBoxBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.SHULKER_BOX, pos, state);
-        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(CONTAINER_SIZE);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
         this.animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
         this.color = ShulkerBoxBlock.getColorFromBlock(state.getBlock());
     }
@@ -252,7 +270,10 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
     }
 
     public void loadFromTag(CompoundTag nbt) {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(CONTAINER_SIZE);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
         if (!this.tryLoadLootTable(nbt) && nbt.contains("Items", 9)) {
             ContainerHelper.loadAllItems(nbt, this.itemStacks);
         }
@@ -266,7 +287,10 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
 
     @Override
     protected void setItems(NonNullList<ItemStack> list) {
-        this.itemStacks = list;
+        // Pufferfish start
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(list);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end
     }
 
     @Override
