From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sun, 16 Jul 2023 19:55:35 +0900
Subject: [PATCH] Add custom worlds


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6ea64ca8ce980f73a4c527ac79367bf4a1e48c89..0fbd1c52b2f59cf3d47c5fe4d529d880e24497e3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -690,6 +690,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.getCustomBossEvents().load(worlddata.getCustomBossEvents());
             }
         }
+        server.addCustomWorlds(); // okocraft - Add custom worlds
         this.forceDifficulty();
         for (ServerLevel worldserver : this.getAllLevels()) {
             this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 017697c6ccd483001601f6f99c6adcce2295c6b4..4f1235fdf6b11d669d2d99fcd3f135e9f0b4610c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1265,6 +1265,77 @@ public final class CraftServer implements Server {
     @Override
     public World createWorld(WorldCreator creator) {
         if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+    // okocraft start - Add custom worlds
+        return createWorld0(creator);
+    }
+
+    private boolean customWorldsAdded = false;
+
+    public void addCustomWorlds() {
+        if (customWorldsAdded) {
+            throw new IllegalStateException("Custom worlds are already added.");
+        }
+
+        customWorldsAdded = true;
+        List<String> customWorlds;
+
+        try {
+            java.nio.file.Path filepath = java.nio.file.Path.of("custom-worlds.txt");
+            if (java.nio.file.Files.isReadable(filepath)) {
+                customWorlds = java.nio.file.Files.readAllLines(filepath, java.nio.charset.StandardCharsets.UTF_8);
+            } else {
+                customWorlds = java.util.Collections.emptyList();
+            }
+        } catch (IOException e) {
+            logger.warning("Cannot load custom worlds: " + e.getMessage());
+            return;
+        }
+
+        for (String line : customWorlds) {
+            line = line.trim().replace(" ", "");
+
+            if (line.startsWith("#")) {
+                continue;
+            }
+
+            String worldName;
+            Environment environment;
+            int i = line.indexOf(":");
+
+            if (i == -1) {
+                worldName = line;
+                environment = Environment.NORMAL;
+            } else if (i + 1 == line.length()) {
+                worldName = line.substring(0, i);
+                environment = Environment.NORMAL;
+            } else {
+                worldName = line.substring(0, i);
+                environment = switch (line.substring(i + 1).toLowerCase(java.util.Locale.ENGLISH)) {
+                    case "nether" -> Environment.NETHER;
+                    case "end", "the_end" -> Environment.THE_END;
+                    case "resource" -> null; // for resource worlds in OKOCRAFT
+                    default -> Environment.NORMAL;
+                };
+            }
+
+            if (worldName.isEmpty()) {
+                continue;
+            }
+
+            if (environment == null) {
+                List.of(
+                        WorldCreator.name(worldName).environment(Environment.NORMAL),
+                        WorldCreator.name(worldName + "_nether").environment(Environment.NETHER),
+                        WorldCreator.name(worldName + "_the_end").environment(Environment.THE_END)
+                ).forEach(this::createWorld0);
+            } else {
+                createWorld0(WorldCreator.name(worldName).environment(environment));
+            }
+        }
+    }
+
+    private World createWorld0(WorldCreator creator) {
+    // okocraft end
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1424,12 +1495,26 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - move up
+        // okocraft start - Copied from MinecraftServer L625
+        int loadRegionRadius = ((32) >> 4);
+        internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        for (int currX = -loadRegionRadius; currX <= loadRegionRadius; ++currX) {
+            for (int currZ = -loadRegionRadius; currZ <= loadRegionRadius; ++currZ) {
+                net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(currX, currZ);
+                internal.chunkSource.addTicketAtLevel(
+                        TicketType.UNKNOWN, pos, io.papermc.paper.chunk.system.scheduling.ChunkHolderManager.MAX_TICKET_LEVEL, pos
+                );
+            }
+        }
+        // okocraft end
+        if (false) // okocraft - Not needed for loading custom worlds
         this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
 
         internal.setSpawnSettings(true, true);
         // Paper - move up
 
         internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
+        if (false) // okocraft - Not needed for loading custom worlds
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
         //internal.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - rewrite chunk system
 
