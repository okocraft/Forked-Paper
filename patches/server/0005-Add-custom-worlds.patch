From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sun, 16 Jul 2023 19:55:35 +0900
Subject: [PATCH] Add custom worlds


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4f988608368cdccfa65d83991fc3bbaeecc6c2f1..bc3a062d060c35bb96ea23b3dd912e40c399d720 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -690,6 +690,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.getCustomBossEvents().load(worlddata.getCustomBossEvents());
             }
         }
+        // okocraft start - Add custom worlds
+        try {
+            net.okocraft.paper.CustomWorldFile.read(java.nio.file.Path.of("custom-worlds.txt")).forEach(this.server::createWorld0);
+        } catch (IOException e) {
+            LOGGER.warn("Cannot load custom worlds: {}", e.getMessage());
+        }
+        // okocraft end
         this.forceDifficulty();
         for (ServerLevel worldserver : this.getAllLevels()) {
             this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
diff --git a/src/main/java/net/okocraft/paper/CustomWorldFile.java b/src/main/java/net/okocraft/paper/CustomWorldFile.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc81541ad6683bf2eb0f628505e47211362c1f8c
--- /dev/null
+++ b/src/main/java/net/okocraft/paper/CustomWorldFile.java
@@ -0,0 +1,69 @@
+package net.okocraft.paper;
+
+import org.bukkit.World;
+import org.bukkit.WorldCreator;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Locale;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+public final class CustomWorldFile {
+
+    @SuppressWarnings("resource")
+    public static Stream<WorldCreator> read(Path filepath) throws IOException {
+        return Files.lines(filepath, StandardCharsets.UTF_8)
+                .flatMap(CustomWorldFile::readLine)
+                .filter(Objects::nonNull);
+    }
+
+    private static Stream<WorldCreator> readLine(String originalLine) {
+        var line = originalLine.trim().replace(" ", "");
+
+        if (line.startsWith("#")) {
+            return null;
+        }
+
+        String worldName;
+        World.Environment environment;
+
+        int i = line.indexOf(":");
+
+        if (i == -1) {
+            worldName = line;
+            environment = World.Environment.NORMAL;
+        } else if (i + 1 == line.length()) {
+            worldName = line.substring(0, i);
+            environment = World.Environment.NORMAL;
+        } else {
+            worldName = line.substring(0, i);
+            environment = switch (line.substring(i + 1).toLowerCase(Locale.ENGLISH)) {
+                case "nether" -> World.Environment.NETHER;
+                case "end", "the_end" -> World.Environment.THE_END;
+                case "resource" -> null; // for resource worlds in OKOCRAFT
+                default -> World.Environment.NORMAL;
+            };
+        }
+
+        if (worldName.isEmpty()) {
+            return null;
+        }
+
+        if (environment == null) {
+            return Stream.of(
+                    WorldCreator.name(worldName).environment(World.Environment.NORMAL),
+                    WorldCreator.name(worldName + "_nether").environment(World.Environment.NETHER),
+                    WorldCreator.name(worldName + "_the_end").environment(World.Environment.THE_END)
+            );
+        } else {
+            return Stream.of(WorldCreator.name(worldName).environment(environment));
+        }
+    }
+
+    private CustomWorldFile() {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 21a1fbcb5cbaa6c7b042eb80a1c44def84f17527..25d9e7497b9afa2c82028603238a4583cd88ffd3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1267,6 +1267,12 @@ public final class CraftServer implements Server {
     @Override
     public World createWorld(WorldCreator creator) {
         if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+    // okocraft start - Add custom worlds
+        return createWorld0(creator);
+    }
+
+    public World createWorld0(WorldCreator creator) {
+    // okocraft end
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1426,12 +1432,26 @@ public final class CraftServer implements Server {
         }
 
         this.console.addLevel(internal); // Paper - Put world into worldlist before initing the world; move up
+        // okocraft start - Copied from MinecraftServer L625
+        int loadRegionRadius = ((32) >> 4);
+        internal.randomSpawnSelection = new net.minecraft.world.level.ChunkPos(internal.getChunkSource().randomState().sampler().findSpawnPosition());
+        for (int currX = -loadRegionRadius; currX <= loadRegionRadius; ++currX) {
+            for (int currZ = -loadRegionRadius; currZ <= loadRegionRadius; ++currZ) {
+                net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(currX, currZ);
+                internal.chunkSource.addTicketAtLevel(
+                        TicketType.UNKNOWN, pos, io.papermc.paper.chunk.system.scheduling.ChunkHolderManager.MAX_TICKET_LEVEL, pos
+                );
+            }
+        }
+        // okocraft end
+        if (false) // okocraft - Not needed for loading custom worlds
         this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
 
         internal.setSpawnSettings(true, true);
         // Paper - Put world into worldlist before initing the world; move up
 
         internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
+        if (false) // okocraft - Not needed for loading custom worlds
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
         //internal.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - rewrite chunk system
 
