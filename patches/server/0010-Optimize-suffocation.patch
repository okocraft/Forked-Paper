From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Tue, 9 Nov 2021 14:50:57 -0500
Subject: [PATCH] Optimize suffocation

The isInWall check to determine suffocation is quite expensive, and
often is completely unnecessary to check. We do two things here to
improve this:

1. We only check for suffocation once per 20 ticks. The maximum
no-damage ticks value means that this change should be extremely
difficult, if not impossible, for players to notice.

2. We additionally execute a check to see if the player can even take
damage in the first place. This check doesn't improve performance much
but is so much cheaper than the suffocation check that it's worth
keeping it.

diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b63393c131f736cd51666c675ac18918e038eca6..69cdcb463a6a6793dd07372a3c68ecb80010e593 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -482,7 +482,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
             if (world1 instanceof ServerLevel) {
                 worldserver1 = (ServerLevel) world1;
-                if (this.isInWall()) {
+                if (this.shouldCheckForSuffocation(worldserver1) && this.isInWall()) {
                     this.hurtServer(worldserver1, this.damageSources().inWall(), 1.0F);
                 } else if (flag && !this.level().getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                     double d1 = this.level().getWorldBorder().getDistanceToBorder(this) + this.level().getWorldBorder().getDamageSafeZone();
@@ -1456,6 +1456,12 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.getHealth() <= 0.0F;
     }
 
+    // Pufferfish start - optimize suffocation
+    public boolean shouldCheckForSuffocation(ServerLevel world) {
+        return this.tickCount % 10 == 0 && !this.isInvulnerableTo(world, this.damageSources().inWall());
+    }
+    // Pufferfish end - optimize suffocation
+
     @Override
     public boolean hurtServer(ServerLevel world, DamageSource source, float amount) {
         if (this.isInvulnerableTo(world, source)) {
