From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sun, 16 Jul 2023 19:55:35 +0900
Subject: [PATCH] Add resource worlds


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index f9cf331202d0768a054e575c8909369920b3d59f..3d4864ed279de76dec336cb7228d1142b098353d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -645,6 +645,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.getCustomBossEvents().load(worlddata.getCustomBossEvents());
             }
         }
+        server.addResourceWorlds(); // okocraft - Add resource worlds
         this.forceDifficulty();
         for (ServerLevel worldserver : this.getAllLevels()) {
             this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 249ff636a40f6493444a6ea8b8a5e017cb2c30eb..18ae06c40fb71545ad3c7d7457bc3fa800fa0c18 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1267,6 +1267,45 @@ public final class CraftServer implements Server {
     @Override
     public World createWorld(WorldCreator creator) {
         if (true) throw new UnsupportedOperationException(); // Folia - not implemented properly yet
+    // okocraft start - Add resource worlds
+        return createWorld0(creator);
+    }
+
+    private boolean addedResourceWorlds = false;
+
+    public void addResourceWorlds() {
+        if (addedResourceWorlds) {
+            throw new IllegalStateException("Resource worlds are already added.");
+        }
+
+        addedResourceWorlds = true;
+        String resourceWorldName;
+
+        try {
+            java.nio.file.Path filepath = java.nio.file.Path.of("resource-world-name.txt");
+            if (java.nio.file.Files.isReadable(filepath)) {
+                resourceWorldName = java.nio.file.Files.readString(filepath, java.nio.charset.StandardCharsets.UTF_8).trim();
+            } else {
+                resourceWorldName = "";
+            }
+        } catch (IOException e) {
+            logger.warning("Cannot load resource worlds: " + e.getMessage());
+            return;
+        }
+
+        if (resourceWorldName.isEmpty()) {
+            return;
+        }
+
+        List.of(
+                WorldCreator.name(resourceWorldName).environment(Environment.NORMAL),
+                WorldCreator.name(resourceWorldName + "_nether").environment(Environment.NETHER),
+                WorldCreator.name(resourceWorldName + "_the_end").environment(Environment.THE_END)
+        ).forEach(this::createWorld0);
+    }
+
+    private World createWorld0(WorldCreator creator) {
+    // okocraft end
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
@@ -1394,6 +1433,7 @@ public final class CraftServer implements Server {
         // Paper - move up
 
         internal.keepSpawnInMemory = creator.keepSpawnLoaded().toBooleanOrElse(internal.getWorld().getKeepSpawnInMemory()); // Paper
+        if (false) // okocraft - Not needed for loading resource worlds
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
         //internal.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - rewrite chunk system
 
