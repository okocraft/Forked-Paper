From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Thu, 22 Jun 2023 11:53:26 +0900
Subject: [PATCH] Re-add some events

- EntityPortalReadyEvent
- spawn/respawn events (that cannot modify the location)
- PlayerChangedWorldEvent

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 23f852ede94bce4d000c8fcaa8fba5d4800b533c..f1a019d08ac96b157de5519fdac61065313d35e9 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1819,6 +1819,16 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
                         );
                     }
                     // now the respawn logic is complete
+                    // okocraft start - Call PlayerRespawnEvent
+                    new PlayerRespawnEvent(
+                            this.getBukkitEntity(),
+                            this.getBukkitEntity().getLocation(),
+                            false,
+                            usedRespawnAnchor[0],
+                            reason,
+                            com.google.common.collect.ImmutableSet.builder()
+                    );
+                    // okocraft end - Call PlayerRespawnEvent
 
                     // last, call the function callback
                     if (respawnComplete != null) {
@@ -2007,6 +2017,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
             // Paper end - Reset shield blocking on dimension change
 
             this.triggerDimensionChangeTriggers(originWorld);
+            new org.bukkit.event.player.PlayerChangedWorldEvent(this.getBukkitEntity(), originWorld.getWorld()).callEvent(); // okocraft - Call PlayerChangedWorldEvent
 
             // finished
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index a809622f43a45fd77bbb07a24f21c841a90dc07a..b8c72c72af3218a37a96755e4fefe6663927715d 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -358,9 +358,10 @@ public abstract class PlayerList {
         // Spigot start - spawn location event
         Player spawnPlayer = player.getBukkitEntity();
         org.spigotmc.event.player.PlayerSpawnLocationEvent ev = new org.spigotmc.event.player.PlayerSpawnLocationEvent(spawnPlayer, spawnPlayer.getLocation());
+        ev.callEvent(); // okocraft - Call PlayerSpawnLocationEvent that cannot modify spawn location
         //this.cserver.getPluginManager().callEvent(ev); // Folia - region threading - TODO WTF TO DO WITH THIS EVENT?
 
-        Location loc = ev.getSpawnLocation();
+        Location loc = spawnPlayer.getLocation(); // okocraft -  Call PlayerSpawnLocationEvent; Prevents the spawn location from being changed
         worldserver1 = ((CraftWorld) loc.getWorld()).getHandle();
 
         player.spawnIn(worldserver1);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 87dce18e5748ba960097cefd4dd5a7d70ca0cc86..f3e60c1171d46467142113497dafe45916043d78 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4386,24 +4386,42 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == net.minecraft.world.level.dimension.LevelStem.END ? Level.OVERWORLD : Level.END);
+        // okocraft start - Call EntityPortalReadyEvent
+        io.papermc.paper.event.entity.EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.ENDER);
+        if (!event.callEvent()) {
+            this.portalProcess = null;
+            return false;
+        } else {
+            destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
+        // okocraft end - Call EntityPortalReadyEvent
         if (destination == null) {
             // wat
             return false;
         }
 
         return this.portalToAsync(destination, portalPos, true, PortalType.END, net.okocraft.paper.PortalLevelEventSender.INSTANCE); // okocraft - Fix not playing travel sound when changing the dimension by portals
+        } // okocraft - Call EntityPortalReadyEvent
     }
 
     public boolean netherPortalLogicAsync(BlockPos portalPos) {
         ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == net.minecraft.world.level.dimension.LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER);
+        // okocraft start - Call EntityPortalReadyEvent
+        io.papermc.paper.event.entity.EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.NETHER);
+        if (!event.callEvent()) {
+            this.portalProcess = null;
+            return false;
+        } else {
+            destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
+        // okocraft end - Call EntityPortalReadyEvent
         if (destination == null) {
             // wat
             return false;
         }
 
         return this.portalToAsync(destination, portalPos, true, PortalType.NETHER, net.okocraft.paper.PortalLevelEventSender.INSTANCE); // okocraft - Fix not playing travel sound when changing the dimension by portals
+        } // okocraft - Call EntityPortalReadyEvent
     }
 
     private static final java.util.concurrent.atomic.AtomicLong CREATE_PORTAL_DOUBLE_CHECK = new java.util.concurrent.atomic.AtomicLong();
