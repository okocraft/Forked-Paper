From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Thu, 22 Jun 2023 11:53:26 +0900
Subject: [PATCH] Re-add some events

- EntityPortalReadyEvent
- spawn/respawn events (that cannot modify the location)
- PlayerChangedWorldEvent

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index da87c4825c67e62ae238877f1fb3220f4c57f553..7f33c88571f8b93940b39f7af9f0b67c62f63b91 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1375,11 +1375,12 @@ public class ServerPlayer extends Player {
 
         this.respawn((player) -> {
             CriteriaTriggers.CHANGED_DIMENSION.trigger(player, Level.END, Level.OVERWORLD);
+            net.okocraft.paper.EventCaller.callRespawnByEndPortalEvent(player.getBukkitEntity()); // okocraft - Call PlayerRespawnEvent
         }, true);
     }
 
     public void respawn(java.util.function.Consumer<ServerPlayer> respawnComplete) {
-        this.respawn(respawnComplete, false);
+        this.respawn(net.okocraft.paper.EventCaller.appendCallingRespawnEvent(respawnComplete), false); // okocraft - Call PlayerRespawnEvent
     }
 
     private void respawn(java.util.function.Consumer<ServerPlayer> respawnComplete, boolean alive) {
@@ -1642,6 +1643,7 @@ public class ServerPlayer extends Player {
             }
 
             this.triggerDimensionChangeTriggers(originWorld);
+            new org.bukkit.event.player.PlayerChangedWorldEvent(this.getBukkitEntity(), originWorld.getWorld()).callEvent(); // okocraft - Call PlayerChangedWorldEvent
 
             // finished
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 771b259ce930d2c857a08ca9150a243679c88c80..19523c1286b43adf488acbf8fd8921cb27d26005 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -358,9 +358,10 @@ public abstract class PlayerList {
         // Spigot start - spawn location event
         Player spawnPlayer = player.getBukkitEntity();
         org.spigotmc.event.player.PlayerSpawnLocationEvent ev = new com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent(spawnPlayer, spawnPlayer.getLocation()); // Paper use our duplicate event
+        ev.callEvent(); // okocraft - Call PlayerSpawnLocationEvent that cannot modify spawn location
         //this.cserver.getPluginManager().callEvent(ev); // Folia - region threading - TODO WTF TO DO WITH THIS EVENT?
 
-        Location loc = ev.getSpawnLocation();
+        Location loc = spawnPlayer.getLocation(); // okocraft -  Call PlayerSpawnLocationEvent; Prevents the spawn location from being changed
         worldserver1 = ((CraftWorld) loc.getWorld()).getHandle();
 
         player.spawnIn(worldserver1);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 28674a5aa523f2c133cf4c8e17eabb1d0ec90497..da4a58210ce2a95d2636caa72d54741e7f5cfcc2 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4167,12 +4167,21 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         io.papermc.paper.util.TickThread.ensureTickThread(this, "Cannot portal entity async");
 
         ServerLevel destination = this.getServer().getLevel(this.level().getTypeKey() == LevelStem.NETHER ? Level.OVERWORLD : Level.NETHER);
+        // okocraft start - Call EntityPortalReadyEvent
+        io.papermc.paper.event.entity.EntityPortalReadyEvent event = new io.papermc.paper.event.entity.EntityPortalReadyEvent(this.getBukkitEntity(), destination == null ? null : destination.getWorld(), org.bukkit.PortalType.NETHER);
+        if (!event.callEvent()) {
+            this.portalTime = 0;
+            return false;
+        } else {
+            destination = event.getTargetWorld() == null ? null : ((CraftWorld) event.getTargetWorld()).getHandle();
+        // okocraft end - Call EntityPortalReadyEvent
         if (destination == null) {
             // wat
             return false;
         }
 
         return this.portalToAsync(destination, false, PortalType.NETHER, net.okocraft.paper.PortalLevelEventSender.INSTANCE); // okocraft - Fix not playing travel sound when changing the dimension by portals
+        } // okocraft - Call EntityPortalReadyEvent
     }
 
     private static final java.util.concurrent.atomic.AtomicLong CREATE_PORTAL_DOUBLE_CHECK = new java.util.concurrent.atomic.AtomicLong();
diff --git a/src/main/java/net/okocraft/paper/EventCaller.java b/src/main/java/net/okocraft/paper/EventCaller.java
new file mode 100644
index 0000000000000000000000000000000000000000..3af73127825b504eb5c30154578a6c7e3526de1c
--- /dev/null
+++ b/src/main/java/net/okocraft/paper/EventCaller.java
@@ -0,0 +1,38 @@
+package net.okocraft.paper;
+
+import com.google.common.collect.ImmutableSet;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Consumer;
+
+public final class EventCaller {
+
+    public static void callRespawnByEndPortalEvent(@NotNull Player player) {
+        new PlayerRespawnEvent(
+                player,
+                player.getLocation(),
+                false,
+                false,
+                PlayerRespawnEvent.RespawnReason.END_PORTAL,
+                ImmutableSet.<PlayerRespawnEvent.RespawnFlag>builder().add(PlayerRespawnEvent.RespawnFlag.END_PORTAL)
+        ).callEvent();
+    }
+
+    private static final Consumer<ServerPlayer> CALL_RESPAWN_EVENT =
+            player -> new PlayerRespawnEvent(
+                    player.getBukkitEntity(),
+                    player.getBukkitEntity().getLocation(),
+                    false,
+                    false,
+                    PlayerRespawnEvent.RespawnReason.DEATH,
+                    ImmutableSet.builder()
+            );
+
+    public static @NotNull Consumer<ServerPlayer> appendCallingRespawnEvent(@Nullable Consumer<ServerPlayer> consumer) {
+        return consumer != null ? consumer.andThen(CALL_RESPAWN_EVENT) : CALL_RESPAWN_EVENT;
+    }
+}
