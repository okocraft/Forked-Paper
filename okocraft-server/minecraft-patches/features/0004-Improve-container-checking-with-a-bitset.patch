From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Siroshun09 <siro.shun8@gmail.com>
Date: Sat, 21 Dec 2024 07:20:54 +0900
Subject: [PATCH] Improve container checking with a bitset


diff --git a/net/minecraft/world/CompoundContainer.java b/net/minecraft/world/CompoundContainer.java
index 0e9beb7f74e527a95bff064631e6d591f5775ce5..b453c36acdd62c0d635e99e0ce7c4cf93ff18754 100644
--- a/net/minecraft/world/CompoundContainer.java
+++ b/net/minecraft/world/CompoundContainer.java
@@ -53,6 +53,17 @@ public class CompoundContainer implements Container {
         return this.container1.getLocation(); // TODO: right?
     }
     // CraftBukkit end
+    // Pufferfish start - Improve container checking with a bitset
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.container1.hasEmptySlot().and(this.container2.hasEmptySlot());
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.container1.isCompletelyEmpty().and(this.container2.isCompletelyEmpty());
+    }
+    // Pufferfish end - Improve container checking with a bitset
 
     public CompoundContainer(Container container1, Container container2) {
         this.container1 = container1;
diff --git a/net/minecraft/world/Container.java b/net/minecraft/world/Container.java
index b382665cc125b8b5c0938e5e55984e4bf91d37ff..0a477e3f904d2d91180e927a5b8e76fe7007fdd4 100644
--- a/net/minecraft/world/Container.java
+++ b/net/minecraft/world/Container.java
@@ -13,6 +13,28 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 
 public interface Container extends Clearable, Iterable<ItemStack> {
     float DEFAULT_DISTANCE_BUFFER = 4.0F;
+    // Pufferfish start - Improve container checking with a bitset; allow the inventory to override and optimize these frequent calls
+    enum OptionalState {
+        TRUE,
+        FALSE,
+        NOT_IMPLEMENTED;
+
+        public OptionalState and(OptionalState other) {
+            if (this == NOT_IMPLEMENTED || other == NOT_IMPLEMENTED) {
+                return NOT_IMPLEMENTED;
+            }
+            return this == TRUE ? other : FALSE;
+        }
+    }
+
+    default OptionalState hasEmptySlot() {
+        return OptionalState.NOT_IMPLEMENTED;
+    }
+
+    default OptionalState isCompletelyEmpty() {
+        return OptionalState.NOT_IMPLEMENTED;
+    }
+    // Pufferfish end - Improve container checking with a bitset
 
     int getContainerSize();
 
diff --git a/net/minecraft/world/entity/vehicle/AbstractChestBoat.java b/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
index 04b8d4be8d7b36585041b5ff69251d4150e54cae..0c598158eddc081c0537f4b6325dbfe30b43e5b6 100644
--- a/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
+++ b/net/minecraft/world/entity/vehicle/AbstractChestBoat.java
@@ -28,7 +28,19 @@ import net.minecraft.world.level.storage.loot.LootTable;
 
 public abstract class AbstractChestBoat extends AbstractBoat implements HasCustomInventoryScreen, ContainerEntity {
     private static final int CONTAINER_SIZE = 27;
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(27);
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> itemStacks = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     @Nullable
     private ResourceKey<LootTable> lootTable;
     private long lootTableSeed;
@@ -188,7 +200,10 @@ public abstract class AbstractChestBoat extends AbstractBoat implements HasCusto
 
     @Override
     public void clearItemStacks() {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
diff --git a/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java b/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
index 6a008c86f4e360c916b93f0e3a62a9d8b43e74e6..0d67a790e0d93b38cc6fcc0f9aa93a2f9117d446 100644
--- a/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -22,7 +22,19 @@ import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractMinecartContainer extends AbstractMinecart implements ContainerEntity {
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> itemStacks = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     @Nullable
     public ResourceKey<LootTable> lootTable;
     public long lootTableSeed;
@@ -164,7 +176,10 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
 
     @Override
     public void clearItemStacks() {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     // Paper start - LootTable API
diff --git a/net/minecraft/world/level/block/entity/BarrelBlockEntity.java b/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
index d679ab599dfd0bdbdc3ab5530d7fcd1c38baf7fa..50b4b94abf5fdf790772971f1195b9f199bec61c 100644
--- a/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -56,7 +56,19 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
     }
     // CraftBukkit end
 
-    private NonNullList<ItemStack> items = NonNullList.withSize(27, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(27);
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     public final ContainerOpenersCounter openersCounter = new ContainerOpenersCounter() {
         @Override
         protected void onOpen(Level level, BlockPos pos, BlockState state) {
@@ -100,7 +112,10 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
     @Override
     protected void loadAdditional(ValueInput input) {
         super.loadAdditional(input);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.items);
         }
@@ -118,7 +133,10 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
diff --git a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index 5a094257a31f0500278a706a418e1697f8810ffb..322b830f8e00e1e7d419e53b2dbc35a8a7241211 100644
--- a/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -113,6 +113,7 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
 
     @Override
     public boolean isEmpty() {
+        if (this.isCompletelyEmpty() == net.minecraft.world.Container.OptionalState.TRUE) return true; // Pufferfish - Improve container checking with a bitset
         for (ItemStack itemStack : this.getItems()) {
             if (!itemStack.isEmpty()) {
                 return false;
diff --git a/net/minecraft/world/level/block/entity/ChestBlockEntity.java b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
index b7d94ebe0ee995392c355c4237da8443dcc79b21..22e2cecd6da63bd5447339db4242a287e622c990 100644
--- a/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -26,7 +26,19 @@ import net.minecraft.world.level.storage.ValueOutput;
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
     private static final int EVENT_SET_OPEN_COUNT = 1;
-    private NonNullList<ItemStack> items = NonNullList.withSize(27, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(27);
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     public final ContainerOpenersCounter openersCounter = new ContainerOpenersCounter() {
         @Override
         protected void onOpen(Level level, BlockPos pos, BlockState state) {
@@ -111,7 +123,10 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
     @Override
     protected void loadAdditional(ValueInput input) {
         super.loadAdditional(input);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.items);
         }
@@ -176,7 +191,10 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
diff --git a/net/minecraft/world/level/block/entity/CrafterBlockEntity.java b/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
index 9ce4b5a3954eda08ef587cf95dec8ed119b7a598..df1d5e1f45accf599d50766794bbeda1e4bf7c35 100644
--- a/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CrafterBlockEntity.java
@@ -32,7 +32,19 @@ public class CrafterBlockEntity extends RandomizableContainerBlockEntity impleme
     public static final int NUM_DATA = 10;
     private static final int DEFAULT_CRAFTING_TICKS_REMAINING = 0;
     private static final int DEFAULT_TRIGGERED = 0;
-    private NonNullList<ItemStack> items = NonNullList.withSize(9, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(9);
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     public int craftingTicksRemaining = 0;
     protected final ContainerData containerData = new ContainerData() {
         private final int[] slotStates = new int[9];
@@ -152,7 +164,10 @@ public class CrafterBlockEntity extends RandomizableContainerBlockEntity impleme
     protected void loadAdditional(ValueInput input) {
         super.loadAdditional(input);
         this.craftingTicksRemaining = input.getIntOr("crafting_ticks_remaining", 0);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.items);
         }
@@ -225,7 +240,10 @@ public class CrafterBlockEntity extends RandomizableContainerBlockEntity impleme
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
diff --git a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index ae52dc75335799e55e403e3d3f11e9f1d67e4305..0117a29daab943bdad3acf3b1d42f2589f274587 100644
--- a/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -15,7 +15,19 @@ import net.minecraft.world.level.storage.ValueOutput;
 
 public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
     public static final int CONTAINER_SIZE = 9;
-    private NonNullList<ItemStack> items = NonNullList.withSize(9, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(9);
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
 
     // CraftBukkit start - add fields and methods
     public java.util.List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<>();
@@ -112,7 +124,10 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
     @Override
     protected void loadAdditional(ValueInput input) {
         super.loadAdditional(input);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.items);
         }
@@ -133,7 +148,10 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 5de769e7bd56bb3355c3c711d46ce5e103ea4409..0b014fd49ca18e3863eb65ad377082c4cb72f93b 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -33,7 +33,19 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public static final int HOPPER_CONTAINER_SIZE = 5;
     private static final int[][] CACHED_SLOTS = new int[54][];
     private static final int NO_COOLDOWN_TIME = -1;
-    private NonNullList<ItemStack> items = NonNullList.withSize(5, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(5);
+    @Override
+    public Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? Container.OptionalState.TRUE : Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     public int cooldownTime = -1;
     private long tickedGameTime = Long.MIN_VALUE; // Folia - region threading
     private Direction facing;
@@ -90,7 +102,10 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     @Override
     protected void loadAdditional(ValueInput input) {
         super.loadAdditional(input);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize());
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.items);
         }
@@ -161,6 +176,15 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static int getFullState(final HopperBlockEntity hopper) {
         hopper.unpackLootTable(null);
 
+        // Puffrefish start - Improve container checking with a bitset; use bitsets
+        if (hopper.optimizedItems.isCompletelyEmpty()) {
+            return HOPPER_EMPTY;
+        } else if (!hopper.optimizedItems.isSlotFilled()) {
+            return HOPPER_HAS_ITEMS;
+        }
+        // Pufferfish end - Improve container checking with a bitset
+
+
         final List<ItemStack> hopperItems = hopper.items;
 
         boolean empty = true;
@@ -527,6 +551,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean isFullContainer(Container container, Direction direction) {
+        if (container.hasEmptySlot() == Container.OptionalState.TRUE) return false; // Pufferfish - Improve container checking with a bitset
         int[] slots = getSlots(container, direction);
 
         for (int i : slots) {
@@ -872,7 +897,10 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.items = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     public static void entityInside(Level level, BlockPos pos, BlockState state, Entity entity, HopperBlockEntity blockEntity) {
diff --git a/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java b/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
index ebea67223ce1d350087c73dff0cc3fe6d7b47ca0..1c7b28dba38cd005869a7d90858c5dce5fb96ca2 100644
--- a/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -41,7 +41,19 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
     public static final float MAX_LID_HEIGHT = 0.5F;
     public static final float MAX_LID_ROTATION = 270.0F;
     private static final int[] SLOTS = IntStream.range(0, 27).toArray();
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+    // Pufferfish start - Improve container checking with a bitset
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(27);;
+    @Override
+    public net.minecraft.world.Container.OptionalState hasEmptySlot() {
+        return this.optimizedItems.isSlotFilled() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+
+    @Override
+    public net.minecraft.world.Container.OptionalState isCompletelyEmpty() {
+        return this.optimizedItems.isCompletelyEmpty() ? net.minecraft.world.Container.OptionalState.TRUE : net.minecraft.world.Container.OptionalState.FALSE;
+    }
+    private NonNullList<ItemStack> itemStacks = this.optimizedItems.nonNullList;
+    // Pufferfish end - Improve container checking with a bitset
     public int openCount;
     private ShulkerBoxBlockEntity.AnimationStatus animationStatus = ShulkerBoxBlockEntity.AnimationStatus.CLOSED;
     private float progress;
@@ -251,7 +263,10 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
     }
 
     public void loadFromTag(ValueInput input) {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(CONTAINER_SIZE);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
         if (!this.tryLoadLootTable(input)) {
             ContainerHelper.loadAllItems(input, this.itemStacks);
         }
@@ -264,7 +279,10 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.itemStacks = items;
+        // Pufferfish start - Improve container checking with a bitset
+        this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items);
+        this.itemStacks = this.optimizedItems.nonNullList;
+        // Pufferfish end - Improve container checking with a bitset
     }
 
     @Override
